@import "./function";

/* Placeholder
 -------------------------- */
@mixin placeholder {
  &::input-placeholder {
    @content;
  }

  &::placeholder {
    @content;
  }

  &:input-placeholder {
    @content;
  }
}

/* BEM
 *  -   中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。
 *  __  双下划线：双下划线用来连接块和块的子元素
 *  --   双横线：双横线用来描述一个块或者块的子元素的一种状态
 -------------------------- */

// 块（block
@mixin b($block) {
  $b: $namespace + "-" + $block !global;

  .#{$b} {
    @content;
  }
}

// 元素（element)
@mixin e($element) {
  $e: $element !global;
  $selector: &;
  $current-selector: "";

  @each $unit in $element {
    $current-selector: #{$current-selector +
      "." +
      $b +
      $element-separator +
      $unit +
      ","};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$current-selector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$current-selector} {
        @content;
      }
    }
  }
}

// 修饰符（modifier)
@mixin m($modifier) {
  $selector: &;
  $current-selector: "";

  @each $unit in $modifier {
    $current-selector: #{$current-selector +
      & +
      $modifier-separator +
      $unit +
      ","};
  }

  @at-root {
    #{$current-selector} {
      @content;
    }
  }
}

@mixin configurable-m($modifier, $E-flag: false) {
  $selector: &;
  $interpolation: "";

  @if $E-flag {
    $interpolation: $element-separator + $E-flag;
  }

  @at-root {
    #{$selector} {
      .#{$b + $interpolation + $modifier-separator + $modifier} {
        @content;
      }
    }
  }
}

@mixin spec-selector(
  $specSelector: "",
  $element: $E,
  $modifier: false,
  $block: $B
) {
  $modifier-combo: "";

  @if $modifier {
    $modifier-combo: $modifier-separator + $modifier;
  }

  @at-root {
    #{&}#{$specSelector}.#{$block
      + $element-separator
      + $element
      + $modifier-combo} {
      @content;
    }
  }
}

@mixin meb($modifier: false, $element: $E, $block: $B) {
  $selector: &;
  $modifier-combo: "";

  @if $modifier {
    $modifier-combo: $modifier-separator + $modifier;
  }

  @at-root {
    #{$selector} {
      .#{$block + $element-separator + $element + $modifier-combo} {
        @content;
      }
    }
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

@mixin extend-rule($name) {
  @extend #{"%shared-" + $name};
}

@mixin share-rule($name) {
  $rule-name: "%shared-" + $name;

  @at-root #{$rule-name} {
    @content;
  }
}

@mixin pseudo($pseudo) {
  @at-root #{&}#{":#{$pseudo}"} {
    @content;
  }
}

/* 通用 图片处理 $img 指路径资源
 -------------------------- */
@mixin base-icon($img, $width: 16px, $height: 16px) {
  position: relative;
  display: inline-block;
  width: $width;
  height: $height;
  vertical-align: middle;

  &::before {
    @content;

    position: absolute;
    top: 0;
    display: block;
    width: $width;
    height: $height;
    content: "";
    background: url("#{$icon-img-url}#{$img}") no-repeat;
    background-size: 100%;
  }
}

/* 1px 解决方案
 -------------------------- */
@mixin border-1px($color: #ccc, $radius: 2px, $style: solid) {
  position: relative;

  &::after {
    @content;

    position: absolute;
    top: 0;
    left: 0;
    box-sizing: border-box;
    display: block;
    width: 100%;
    height: 100%;
    pointer-events: none;
    content: "";
    border: 1RPX $style $color;
    border-radius: $radius;
    transform-origin: 0 0;

    @media (resolution >= 2dppx) {
      width: 200%;
      height: 200%;
      border-radius: $radius * 2;
      transform: scale(0.5) translateZ(0);
    }

    @media (resolution >= 3dppx) {
      width: 300%;
      height: 300%;
      border-radius: $radius * 3;
      transform: scale(0.333) translateZ(0);
    }
  }
}

@mixin ext-overflow($t) {
  display: -webkit-box;
  overflow: hidden;
  text-overflow: ellipsis;
  word-break: break-all;
  white-space: normal;
  -webkit-box-orient: vertical;
  -webkit-box-pack: center;
  -webkit-line-clamp: $t;
}

@mixin text-overflow-1 {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// 解决 320 的 兼容性问题
@mixin mini320 {
  @media screen and (width >= 318px) and (width <= 360px) {
    @content;
  }
}

/* 处理文本选中
 -------------------------- */
@mixin user-select($value) {
  user-select: $value;
}

@mixin is-windows {
  .is-window {
    @content;
  }
}
